export declare class MathNet {
    static Logistic(x: number): number;
    static CalculateIP(relativeD: number, mt: number): number;
    static CalculateHitProb(d: number, mt: number, tp: number): number;
    static FindRootExpand(f: (x: number) => number, guessLowerBound: number, guessUpperBound: number, accuracy?: number, maxIterations?: number, expandFactor?: number, maxExpandIterations?: number): {
        root: number;
        found: boolean;
    };
    static FindRoot(f: (x: number) => number, lowerBound: number, upperBound: number, accuracy: number, maxIterations?: number): {
        root: number;
        found: boolean;
    };
    static AlmostEqualNormRelative(a: number, b: number, diff: number, maximumError: number): boolean;
    static AlmostEqualRelative(a: number, b: number): boolean;
    private static Sign;
    private static Expand;
    private static Reduce;
    private static ExpandReduce;
    static LinearSpaced(length: number, start: number, stop: number): number[];
}
