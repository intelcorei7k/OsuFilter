"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Tap_1 = require("./Skills/Tap");
const FingerControl_1 = require("./Skills/FingerControl");
const PPAim_1 = require("./Skills/PPAim");
const Utils_1 = require("./Utils");
const Slider_1 = require("./Objects/osu!/HitObjects/Slider");
class AttributesGenerator {
    static Calculate(beatmap, mods, clockRate) {
        const hitObjects = beatmap.HitObjects;
        if (beatmap.HitObjects.length === 0)
            return { Mods: mods };
        const mapLength = (beatmap.HitObjects[beatmap.HitObjects.length - 1].StartTime - beatmap.HitObjects[0].StartTime) / 1000 / clockRate;
        // Tap
        const { tapDiff, streamNoteCount, mashLevels, tapSkills, strainHistory } = Tap_1.default.CalculateTapAttributes(hitObjects, clockRate);
        // Finger control
        const fingerControlDiff = FingerControl_1.default.CalculateFingerControlDiff(hitObjects, clockRate);
        // Aim
        const { aimDiff, fcTimeTP, comboTPs, missTPs, missCounts, cheeseNoteCount, cheeseLevels, cheeseFactors } = PPAim_1.default.CalculateAimAttributes(hitObjects, clockRate, strainHistory);
        // console.log('aimDiff:', aimDiff);
        // graph for aim
        // seems unnecessary
        const tapSR = this.tapMultiplier * Math.pow(tapDiff, this.srExponent);
        const aimSR = this.aimMultiplier * Math.pow(aimDiff, this.srExponent);
        const fingerControlSR = this.fingerControlMultiplier * Math.pow(fingerControlDiff, this.srExponent);
        const sr = Utils_1.default.PowerMean([tapSR, aimSR, fingerControlSR], 7) * 1.131;
        let maxCombo = beatmap.HitObjects.length;
        maxCombo += beatmap.HitObjects.reduce((total, current) => {
            if (current instanceof Slider_1.Slider)
                return total + current.NestedHitObjects.length - 1;
            else
                return total;
        }, 0);
        return {
            StarRating: sr,
            Mods: mods,
            Length: mapLength,
            TapSR: tapSR,
            TapDiff: tapDiff,
            StreamNoteCount: streamNoteCount,
            MashLevels: mashLevels,
            TapSkills: tapSkills,
            FingerControlSR: fingerControlSR,
            FingerControlDiff: fingerControlDiff,
            AimSR: aimSR,
            AimDiff: aimDiff,
            ComboTPs: comboTPs,
            MissTPs: missTPs,
            MissCounts: missCounts,
            CheeseNoteCount: cheeseNoteCount,
            CheeseLevels: cheeseLevels,
            CheeseFactors: cheeseFactors,
            ApproachRate: beatmap.ApproachRate,
            OverallDifficulty: beatmap.OverallDifficulty,
            MaxCombo: maxCombo
        };
    }
}
AttributesGenerator.aimMultiplier = 0.515;
AttributesGenerator.tapMultiplier = 0.515;
AttributesGenerator.fingerControlMultiplier = 1;
AttributesGenerator.srExponent = 0.9;
exports.default = AttributesGenerator;
